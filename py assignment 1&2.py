# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ofth-nnjxph9O_BbXOLNkc_U3YqWYmvm
"""

!pip install biopython==1.81
from Bio import SeqIO
for record in SeqIO.parse("/content/sequence.fasta", "fasta"):
    print(f"ID :{record.id}")
    print(f"Sequence :{record.seq}")
    print(f"Length :{len(record)}")

for record in SeqIO.parse("/content/sequence.fasta", "fasta"):
    print(f"ID :{record.id}")
    print(f"Sequence :{record.seq}")
    print(f"Length :{len(record)}")

def needleman_wunsch(seq1, seq2, match=1, mismatch=-1, gap=-1):
    # Initialize the score matrix
    m, n = len(seq1), len(seq2)
    score_matrix = [[0] * (n + 1) for _ in range(m + 1)]

    # Initialize gap penalties
    for i in range(m + 1):
        score_matrix[i][0] = i * gap
    for j in range(n + 1):
        score_matrix[0][j] = j * gap

    # Fill in the score matrix
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            match_score = score_matrix[i - 1][j - 1] + (match if seq1[i - 1] == seq2[j - 1] else mismatch)
            delete_score = score_matrix[i - 1][j] + gap
            insert_score = score_matrix[i][j - 1] + gap
            score_matrix[i][j] = max(match_score, delete_score, insert_score)

    # Traceback to get the aligned sequences
    aligned_seq1, aligned_seq2 = [], []
    i, j = m, n
    while i > 0 or j > 0:
        current_score = score_matrix[i][j]
        if i > 0 and j > 0 and (seq1[i - 1] == seq2[j - 1] or score_matrix[i][j] == score_matrix[i - 1][j - 1] + mismatch):
            aligned_seq1.append(seq1[i - 1])
            aligned_seq2.append(seq2[j - 1])
            i -= 1
            j -= 1
        elif i > 0 and score_matrix[i][j] == score_matrix[i - 1][j] + gap:
            aligned_seq1.append(seq1[i - 1])
            aligned_seq2.append('-')
            i -= 1
        else:
            aligned_seq1.append('-')
            aligned_seq2.append(seq2[j - 1])
            j -= 1

    # Reverse aligned sequences
    aligned_seq1.reverse()
    aligned_seq2.reverse()

    return score_matrix[m][n], ''.join(aligned_seq1), ''.join(aligned_seq2)

# Example sequences
seq1 = "ATGCATGCATGCATGC"
seq2 = "CGTACGTACGTACGTA"

# Perform alignment
score, aligned_seq1, aligned_seq2 = needleman_wunsch(seq1, seq2)
print("Score:", score)
print("Aligned seq1:", aligned_seq1)
print("Aligned seq2:", aligned_seq2)